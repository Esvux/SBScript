/* Generated By:JavaCC: Do not edit this line. ParserLenguaje.java */
  package org.esvux.sbscript.parser;

  public class ParserLenguaje implements ParserLenguajeConstants {

    public static void main(String args[]) throws ParseException {
      ParserLenguaje parser = new ParserLenguaje(
        new java.io.StringReader("Num a,b,c;")
      );
      parser.PROGRAMA();
      System.out.println("An\u00e1lisis concluido!!");
    }

  final public void PROGRAMA() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        DEC_GLOBAL();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case T_NUM:
        case T_STR:
        case T_BOOL:
        case T_VOID:
          METODO();
          break;
        case PR_PRINCIPAL:
          PRINCIPAL();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_NUM:
      case T_STR:
      case T_BOOL:
      case T_VOID:
      case PR_PRINCIPAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public void DEC_GLOBAL() throws ParseException {
    TIPO_VAR();
    jj_consume_token(ID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(1);
      jj_consume_token(ID);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      EXP();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(3);
  }

  final public void TIPO_VAR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NUM:
      jj_consume_token(T_NUM);
      break;
    case T_STR:
      jj_consume_token(T_STR);
      break;
    case T_BOOL:
      jj_consume_token(T_BOOL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void METODO() throws ParseException {
    TIPO_MET();
    jj_consume_token(ID);
    jj_consume_token(4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NUM:
    case T_STR:
    case T_BOOL:
      TIPO_VAR();
      jj_consume_token(ID);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(1);
        TIPO_VAR();
        jj_consume_token(ID);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(5);
    jj_consume_token(6);
    jj_consume_token(7);
  }

  final public void TIPO_MET() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NUM:
      jj_consume_token(T_NUM);
      break;
    case T_STR:
      jj_consume_token(T_STR);
      break;
    case T_BOOL:
      jj_consume_token(T_BOOL);
      break;
    case T_VOID:
      jj_consume_token(T_VOID);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PRINCIPAL() throws ParseException {
    jj_consume_token(PR_PRINCIPAL);
    jj_consume_token(4);
    jj_consume_token(5);
    jj_consume_token(6);
    jj_consume_token(7);
  }

  final public void CUERPO() throws ParseException {
    jj_consume_token(6);
    SENTENCIAS();
    jj_consume_token(7);
  }

  final public void SENTENCIAS() throws ParseException {
    if (jj_2_2(2)) {
      ASIGNACION();
      jj_consume_token(3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        LLAMADA();
        jj_consume_token(3);
        break;
      case T_NUM:
      case T_STR:
      case T_BOOL:
        DEC_LOCAL();
        jj_consume_token(3);
        break;
      case PR_RETORNO:
        RETORNO();
        jj_consume_token(3);
        break;
      case PR_MOSTRAR:
        MOSTRAR();
        jj_consume_token(3);
        break;
      case PR_SI:
        SI();
        break;
      case PR_SELECCIONA:
        SELECCIONA();
        break;
      case PR_MIENTRAS:
        MIENTRAS();
        break;
      case PR_PARA:
        PARA();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void DEC_LOCAL() throws ParseException {
    TIPO_VAR();
    jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(1);
      jj_consume_token(ID);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      EXP();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void ASIGNACION() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(2);
    EXP();
  }

  final public void LLAMADA() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      EXP();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(1);
        EXP();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(5);
  }

  final public void RETORNO() throws ParseException {
    jj_consume_token(PR_RETORNO);
    EXP();
  }

  final public void MOSTRAR() throws ParseException {
    jj_consume_token(PR_MOSTRAR);
    jj_consume_token(4);
    EXP();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(1);
      EXP();
    }
    jj_consume_token(5);
  }

  final public void SI() throws ParseException {
    jj_consume_token(PR_SI);
    jj_consume_token(4);
    EXP();
    jj_consume_token(5);
    CUERPO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_SINO:
      jj_consume_token(PR_SINO);
      CUERPO();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void SELECCIONA() throws ParseException {
    jj_consume_token(PR_SELECCIONA);
    jj_consume_token(4);
    EXP();
    jj_consume_token(5);
    label_7:
    while (true) {
      NATIVO();
      jj_consume_token(8);
      CUERPO();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NUMERO:
      case CADENA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
    }
  }

  final public void MIENTRAS() throws ParseException {
    jj_consume_token(PR_MIENTRAS);
    jj_consume_token(4);
    EXP();
    jj_consume_token(5);
    CUERPO();
  }

  final public void PARA() throws ParseException {
    jj_consume_token(PR_PARA);
    jj_consume_token(4);
    jj_consume_token(T_NUM);
    jj_consume_token(ID);
    jj_consume_token(2);
    EXP();
    jj_consume_token(3);
    EXP();
    jj_consume_token(3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO:
      jj_consume_token(INCREMENTO);
      break;
    case DECREMENTO:
      jj_consume_token(DECREMENTO);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(5);
    CUERPO();
  }

  final public void EXP() throws ParseException {
    LOG_OR();
  }

  final public void LOG_OR() throws ParseException {
    LOG_AND();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(9);
      LOG_AND();
    }
  }

  final public void LOG_AND() throws ParseException {
    LOG_XOR();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(10);
      LOG_XOR();
    }
  }

  final public void LOG_XOR() throws ParseException {
    LOG_NOT();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      jj_consume_token(11);
      LOG_NOT();
    }
  }

  final public void LOG_NOT() throws ParseException {
    label_11:
    while (true) {
      jj_consume_token(12);
      RELACIONAL();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
    }
  }

  final public void RELACIONAL() throws ParseException {
    ARITM();
    OP_REL();
    ARITM();
  }

  final public void OP_REL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      break;
    case 14:
      jj_consume_token(14);
      break;
    case 15:
      jj_consume_token(15);
      break;
    case 16:
      jj_consume_token(16);
      break;
    case 17:
      jj_consume_token(17);
      break;
    case 18:
      jj_consume_token(18);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ARITM() throws ParseException {
    TERM();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 20:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        TERM();
        break;
      case 20:
        jj_consume_token(20);
        TERM();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void TERM() throws ParseException {
    FACT();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
      case 22:
      case 23:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        FACT();
        break;
      case 22:
        jj_consume_token(22);
        FACT();
        break;
      case 23:
        jj_consume_token(23);
        FACT();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FACT() throws ParseException {
    VAL();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_14;
      }
      jj_consume_token(24);
      VAL();
    }
  }

  final public void VAL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      jj_consume_token(4);
      EXP();
      jj_consume_token(5);
      break;
    case 20:
      jj_consume_token(20);
      VAL();
      break;
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        jj_consume_token(4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
          EXP();
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 1:
              ;
              break;
            default:
              jj_la1[27] = jj_gen;
              break label_15;
            }
            jj_consume_token(1);
            EXP();
          }
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        jj_consume_token(5);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      break;
    case TRUE:
    case FALSE:
    case NUMERO:
    case CADENA:
      NATIVO();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NATIVO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(2)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserLenguajeTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e000000,0x3e000000,0x2,0x4,0xe000000,0x2,0xe000000,0x1e000000,0xce000000,0x2,0x4,0x2,0x1000,0x2,0x0,0x0,0x0,0x200,0x400,0x800,0x1000,0x7e000,0x180000,0x180000,0xe00000,0xe00000,0x1000000,0x2,0x1000,0x10,0x100010,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81d,0x0,0x0,0x0,0x0,0x0,0x2,0x780,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf80,0x780,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserLenguaje(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserLenguaje(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserLenguajeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserLenguaje(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserLenguajeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserLenguaje(ParserLenguajeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserLenguajeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
